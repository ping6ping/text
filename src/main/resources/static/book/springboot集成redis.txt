git 问题:git pull 时遇到问题 Pulling is not possible because you have unmerged files
解决:1、先将代码提交至本地仓库  git add .---> git commit -->git pull 


redis的启动：
	1、命令./redis-server redis.windows.conf
	2、直接点击redis安装文件夹中的“redis-server.exe”就可以启动
	3、命令行连接redis  redis-cli -h host -p port -a password
配置：
	1、加入起步依赖
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-redis</artifactId>
		</dependency>
	2、在application.properties配置redis连接信息
		spring.redis.host=127.0.0.1
		spring.redis.password=
		spring.redis.port=6379
	3、配置了上面的步骤，springboot将自动配置redisTemplate,在需要操作redis的类中注入redisTemplate
		@Autowired
		private RedisTemplate<Object, Object>  redisTemplate; //泛型里面只能为<String,String>或<Object,Object>
	4、//字符串的序列化器  可以格式化key的格式，方便查看
		RedisSerializer redisSerializer = new StringRedisSerializer();
		redisTemplate.setStringSerializer(redisSerializer);
    5、防止高并发，缓存穿透问题
		a、在方法名上加锁synchronized    public synchronized List<User> getAllUsers() {  //牺牲了性能
		b、synchronized(this){}锁住当前对象
操作命令:
	            select 5 切换数据库 （默认使用0数据库）
                    flushall (清空所有数据)
                    flushdb（清空当前库）
	            exit (退出)
                    dbsize 查看当前数据库key的数目

1+5命令: （1中key操作，5种数据类型操作）
	key常用命令:  keys * 列出当前库所有的key(线上不建议使用，数量太大)  
		      exists key有没有存在某个key
		      move key db 将当前key移动到指定库中  
		      expire key  seconds 设置key的过期时间
		      ttl key 查看key还有多少秒过期，-1永不过期，-2已过期或key不存在
		      type key 存储数据类型
		      del  key 删除key
	
	5种数据类型操作: string: set key value 放值 
						     get key 取值
							 incr key 将key中存储的数字值加1，如果key不存在，则key的值先被初始化为0再执行incr操作（只能对数字类型的数据操作）
							 decr key 将key中存储的数字值加-1，如果key不存在，则key的值先被初始化为0再执行decr操作（只能对数字类型的数据操作）
							 setex key second value      set expire的简写，设置key的值，并将key的生存时间设为seconds(以秒为单位)
							 setnx key value   set if not exists的简写，如果key不存在，则set值，存在则不设置值 
							 getset key value 设置key的值为value，并返回key的旧值
							 strlen key 返回key所存储的字符串长度
							 append key 如果key存在且是字符串，则将value追加到key原来旧值的末尾；如果key不存在，则将key设值为value
							 incrby key num 将key中存储的数字值加num，如果key不存在，则key的值先被初始化为0再执行增量操作（只能对数字类型的数据操作）
							 decrby key num 将key中存储的数字减去num，如果key不存在，则key的值先被初始化为0再执行减操作（只能对数字类型的数据操作）
							 getrange key start end 获取key中字符串值从start开始到end结束的子字符串
							 setrange key offset  value 从指定的位置开始将key值替换为新的字符串
							 mset 同时设置一个或多个key-value对
							 mget 获取所有（一个或多个）给定key的值
							 msetnx 同时设置一个或多个key-value对，当且仅当所有给定key都不存在时才能设置成功，否则只要有一个key存在都会失败
					 hash: hash是一个string类型的field和value的映射表，hash特别适用于存储对象。
					       hset     将哈希表key中的域field的值设为value
						   hget     获取哈希表key中给定域field的值
						   hmset    同时将多个field-value(域-值)对设置到哈希表key中
						   hmget    获取哈希表key中一个或多个给定域的值
						   hgetall  获取哈希表key中所有的域和值
						   hdel   删除哈希表key中的一个或多个给定域的值
						   hkeys  查看哈希表key中的所有field域
						   hvals   查看哈希表key中所有域的值
						   hlen 获取哈希表key中field的个数
						   hexists 查看哈希表key中，给定域field是否存在
						   hincrby 为哈希表key中的域field的值加上增量increment
						   hsetnx 将哈希表key中的域field的值设为value，当且仅当域field不存在的时候才设置，否则不设置
					 list：简单的字符串列表，按照插入顺序排序，你可以添加一个元素导列表的头部（左边）或者尾部（右边）
					       lpush 将一个或多个值value插入到列表key的表头（最左边）
						   rpush 将一个或多个值value插入到列表key的表尾（最右边）
						   lrange 获取列表key中指定区间内的元素，0表示列表的第一个元素，以1表示列表的第二个元素，-1表示列表的最后一个元素，-2表示列表的倒数第二个元素
						   lpop 从左边获取列表key的一个元素，并将该元素移除
						   rpop 从右边获取列表key的一个元素，并将该元素移除
						   lindex 获取列表key中下标为指定index的元素
						   llen 获取列表key的长度
						   lrem 从左到右删除集列表中指定个数的并与指定value值相等的value
						   ltrim 删除指定区域外的元素，比如ltrim list 0 2，表示只保留列表list的前三个元素，其余元素全部删除
						   rpoplpush  rpoplpush source destination 将列表source中的最后一个元素（尾元素）弹出插入到列表destination，作为destination列表的头元素
						   lset 将列表key下标为index的元素的值设置为value
						   linsert 将值value插入到列表key当中位于值pivot之前或之后的位置
					 set: set是string类型的无序集合，集合成员是唯一的，即集合中不能出现重复的数据
					      sadd 将一个或多个member元素加入到集合key当中，已经存在与集合的member元素将不会再加入
						  smembers 获取集合key中的所有元素
						  sismember  判断member元素是否是集合key的成员
						  scard 获取集合里面的元素个数
						  srem 删除集合key中的一个或多个member元素
						  srandmember 随机返回集合中的一个元素
						  spop 随机从集合中删除一个元素
						  smove 将member元素从一个集合移动到另一个集合
					zset： 有序集合Zset和集合set一样也是string类型元素的集合，且不允许重复的成员，不同的是zset的每个元素都会关联一个分数（分数可以重复），redis将通过分数来为集合中不同的成员进行从小到大的排序。
						  zadd 将一个元素或多个member元素及其score值加入到有序集合key中
						  zrem 删除有序集合key中的一个或多个成员
						  zcard 获取有序集key的元素成员的个数
						  zrevrank 获取有序集key中成员member的排名，有序集成员按score值从大到小顺序排列
						  zrangebyscore  获取有序集key中，所有score值介于min和max之间的成员
						  zrerangebyscore  获取有序集key中，所有score值介于max和min之间的成员
						  zcount 获取有序集key中，所有score值介于min和max之间的成员个数
						  zrange 获取有序集key中，指定区间的成员，按score值从小到大排列
						  zrevrange 获取有序集key中，指定区间的成员，按score值从大到小排列
						   